LOCATION_ID = "ID",  # Unique ID for each location
ACTIVITY_VENUES = "_Venues",  # Venues an individual may visit. Appended to activity type, e.g. 'Retail_Venues'
ACTIVITY_FLOWS = "_Flows",  # Flows to a venue for an individual. Appended to activity type, e.g. 'Retail_Flows'
ACTIVITY_TIME = "_Time",  # Amount of time an individual spends doing an activity. E.g. 'Retail_Time'
ACTIVITY_DURATION = "_Duration", # Column to record proportion of the day that invividuals do the activity
INDIVIDUAL_AGE = "DC1117EW_C_AGE", # Age column in the table of individuals
INDIVIDUAL_SEX = "DC1117EW_C_SEX",  # Sex column in the table of individuals
INDIVIDUAL_ETH = "DC2101EW_C_ETHPUK11"  # Ethnicity column in the table of individuals
),
)
a <- new("Circle")
a <- new("Circle)
a <- new("ColumnNames")
setClass(
Class = "ColumnNames",
representation = representation(
#Used to record standard dataframe column names used throughout"""
LOCATION_DANGER = "string",  # Danger associated with a location
LOCATION_NAME = "string",  # Name of a location
LOCATION_ID = "string",  # Unique ID for each location
ACTIVITY_VENUES = "string",  # Venues an individual may visit. Appended to activity type, e.g. 'Retail_Venues'
ACTIVITY_FLOWS = "string",  # Flows to a venue for an individual. Appended to activity type, e.g. 'Retail_Flows'
ACTIVITY_TIME = "string",  # Amount of time an individual spends doing an activity. E.g. 'Retail_Time'
ACTIVITY_DURATION = "string", # Column to record proportion of the day that invividuals do the activity
INDIVIDUAL_AGE = "string", # Age column in the table of individuals
INDIVIDUAL_SEX = "string",  # Sex column in the table of individuals
INDIVIDUAL_ETH = "string"  # Ethnicity column in the table of individuals
),
)
setClass(
Class = "Circle",
representation = representation(
radius = "numeric",
diameter = "numeric"
),
)
?setClass
setClass(
Class = "ColumnNames",
representation = representation(
#Used to record standard dataframe column names used throughout"""
LOCATION_DANGER = "character",  # Danger associated with a location
LOCATION_NAME = "character",  # Name of a location
LOCATION_ID = "character",  # Unique ID for each location
ACTIVITY_VENUES = "character",  # Venues an individual may visit. Appended to activity type, e.g. 'Retail_Venues'
ACTIVITY_FLOWS = "character",  # Flows to a venue for an individual. Appended to activity type, e.g. 'Retail_Flows'
ACTIVITY_TIME = "character",  # Amount of time an individual spends doing an activity. E.g. 'Retail_Time'
ACTIVITY_DURATION = "character", # Column to record proportion of the day that invividuals do the activity
INDIVIDUAL_AGE = "character", # Age column in the table of individuals
INDIVIDUAL_SEX = "character",  # Sex column in the table of individuals
INDIVIDUAL_ETH = "character"  # Ethnicity column in the table of individuals
),
)
ColumnNames.object <- ColumnNames(LOCATION_DANGER = "Danger",  # Danger associated with a location
LOCATION_NAME = "Location_Name",  # Name of a location
LOCATION_ID = "ID",  # Unique ID for each location
ACTIVITY_VENUES = "_Venues",  # Venues an individual may visit. Appended to activity type, e.g. 'Retail_Venues'
ACTIVITY_FLOWS = "_Flows",  # Flows to a venue for an individual. Appended to activity type, e.g. 'Retail_Flows'
ACTIVITY_TIME = "_Time",  # Amount of time an individual spends doing an activity. E.g. 'Retail_Time'
ACTIVITY_DURATION = "_Duration", # Column to record proportion of the day that invividuals do the activity
INDIVIDUAL_AGE = "DC1117EW_C_AGE", # Age column in the table of individuals
INDIVIDUAL_SEX = "DC1117EW_C_SEX",  # Sex column in the table of individuals
INDIVIDUAL_ETH = "DC2101EW_C_ETHPUK11"  # Ethnicity column in the table of individuals
)
ColumnNames <- setClass(
Class = "ColumnNames",
representation = representation(
#Used to record standard dataframe column names used throughout"""
LOCATION_DANGER = "character",  # Danger associated with a location
LOCATION_NAME = "character",  # Name of a location
LOCATION_ID = "character",  # Unique ID for each location
ACTIVITY_VENUES = "character",  # Venues an individual may visit. Appended to activity type, e.g. 'Retail_Venues'
ACTIVITY_FLOWS = "character",  # Flows to a venue for an individual. Appended to activity type, e.g. 'Retail_Flows'
ACTIVITY_TIME = "character",  # Amount of time an individual spends doing an activity. E.g. 'Retail_Time'
ACTIVITY_DURATION = "character", # Column to record proportion of the day that invividuals do the activity
INDIVIDUAL_AGE = "character", # Age column in the table of individuals
INDIVIDUAL_SEX = "character",  # Sex column in the table of individuals
INDIVIDUAL_ETH = "character"  # Ethnicity column in the table of individuals
),
)
ColumnNames.object <- ColumnNames(LOCATION_DANGER = "Danger",  # Danger associated with a location
LOCATION_NAME = "Location_Name",  # Name of a location
LOCATION_ID = "ID",  # Unique ID for each location
ACTIVITY_VENUES = "_Venues",  # Venues an individual may visit. Appended to activity type, e.g. 'Retail_Venues'
ACTIVITY_FLOWS = "_Flows",  # Flows to a venue for an individual. Appended to activity type, e.g. 'Retail_Flows'
ACTIVITY_TIME = "_Time",  # Amount of time an individual spends doing an activity. E.g. 'Retail_Time'
ACTIVITY_DURATION = "_Duration", # Column to record proportion of the day that invividuals do the activity
INDIVIDUAL_AGE = "DC1117EW_C_AGE", # Age column in the table of individuals
INDIVIDUAL_SEX = "DC1117EW_C_SEX",  # Sex column in the table of individuals
INDIVIDUAL_ETH = "DC2101EW_C_ETHPUK11"  # Ethnicity column in the table of individuals
)
View(ColumnNames.object)
for (tqdm in (1:1000000)){
#append(age,int(random.uniform(0,100)))
}
for (tqdm in (1:1000000)){
append(age,int(runif(0,100)))
}
age <- rep(NA,1)
print("Creating initial array", flush=True)
?runif
age <- rep(NA,1)
print("Creating initial array", flush=True)
for (tqdm in (1:1000000)){
append(age,int(runif(1,0,100)))
}
age <- rep(NA,1)
print("Creating initial array")
for (tqdm in (1:1000000)){
append(age,runif(1,0,100))
}
age <- rep(NA,1)
print("Creating initial array")
for (tqdm in (1:1000000)){
age <- append(age,runif(1,0,100))
}
age <- runif(1000000,0,100)
age_pd <- data.frame('age'=age)
age <- round(runif(1000000,0,100))
?round
age <- round(runif(1000000,0,100),digits=0)
age_pd <- data.frame('age'=age)
age_np <- as.array(age)
inc <- function(x)
{
eval.parent(substitute(x <- x + 1))
}
age2 < inc(age)
age2 <- inc(age)
increment_age_np2 <- function(){
return(list(lambda = x+1,
x = age_np))
}
increment_age_np2
test<_increment_age_np2
test<-increment_age_np2
increment_age_np2 <- function(){
tmp < list(lambda = x+1, x = age_np)
return(tmp)
}
increment_age_np2 <- function(lambda = x+1, x = age_np){
tmp < list(lambda, x)
return(tmp)
}
test<-increment_age_np2()
increment_age_np2 <- function(lambda = x+1, x = age_np){
tmp <- list(lambda, x)
return(tmp)
}
test<-increment_age_np2()
ColumnNames <- setClass(
Class = "ColumnNames",
representation = representation(
#Used to record standard dataframe column names used throughout"""
LOCATION_DANGER = "character",  # Danger associated with a location
LOCATION_NAME = "character",  # Name of a location
LOCATION_ID = "character",  # Unique ID for each location
ACTIVITY_VENUES = "character",  # Venues an individual may visit. Appended to activity type, e.g. 'Retail_Venues'
ACTIVITY_FLOWS = "character",  # Flows to a venue for an individual. Appended to activity type, e.g. 'Retail_Flows'
ACTIVITY_TIME = "character",  # Amount of time an individual spends doing an activity. E.g. 'Retail_Time'
ACTIVITY_DURATION = "character", # Column to record proportion of the day that invividuals do the activity
INDIVIDUAL_AGE = "character", # Age column in the table of individuals
INDIVIDUAL_SEX = "character",  # Sex column in the table of individuals
INDIVIDUAL_ETH = "character"  # Ethnicity column in the table of individuals
),
)
ColumnNames.object <- ColumnNames(LOCATION_DANGER = "Danger",  # Danger associated with a location
LOCATION_NAME = "Location_Name",  # Name of a location
LOCATION_ID = "ID",  # Unique ID for each location
ACTIVITY_VENUES = "_Venues",  # Venues an individual may visit. Appended to activity type, e.g. 'Retail_Venues'
ACTIVITY_FLOWS = "_Flows",  # Flows to a venue for an individual. Appended to activity type, e.g. 'Retail_Flows'
ACTIVITY_TIME = "_Time",  # Amount of time an individual spends doing an activity. E.g. 'Retail_Time'
ACTIVITY_DURATION = "_Duration", # Column to record proportion of the day that invividuals do the activity
INDIVIDUAL_AGE = "DC1117EW_C_AGE", # Age column in the table of individuals
INDIVIDUAL_SEX = "DC1117EW_C_SEX",  # Sex column in the table of individuals
INDIVIDUAL_ETH = "DC2101EW_C_ETHPUK11"  # Ethnicity column in the table of individuals
)
View(ColumnNames.object)
MicrosimAnalysis <- setRefClass(
"MicrosimAnalysis",
#fields = list(
#    x = "ANY",
#    y = "numeric",
#    z = "character"
#),
methods = list(
population_distribution = function(cls, individuals: pd.DataFrame, variables: List[str]){
#Create a frequency distribtion of the population, using the given variable
param individuals: The DataFrame of the individual population
param variable: The variable(s) (DataFrame column(s)) on which to create a histogram. Either a single
string variable or a list of variables.
return: The matplotlib Figure object.
if type(variables) == str{ # If only one variable provided then make it into a list
variables = [variables]
}
# Check the columns exist in the dataframe
for var in variables{
if var not in individuals.columns{
raise Exception(f"Column {var} is not in the individuals dataframe.\n Possible columns",
f"to use are {individuals.columns}")
}
}
# Create main plot object
fig = plt.figure(figsize=(12, 14))
fig.tight_layout()
# Now add 'sub plots', i.e. plots for each of the variables
# Iterate over each variable, getting a counter (i) and the variable name (var)
for i, var in enumerate(variables){
# Create a new subplot. Currently one column with a new row for each plot.
ax = fig.add_subplot(len(variables), 1, i+1) # (rows, cols, index) (index used to distinguish each subplot)
# Subset the data using pandas.loc. Keep all rows but only select the column we want
data = individuals.loc[:, var]
ax.hist(data)
#ax.scatter(data.DateTime, data.Count, s=0.02, c="black")
ax.set_title(f"Histogram of {var}")
}
return(fig)
}
)
)
test <- "test"
class(test)
?setRefClass
install.packages("mixdist")
varaibles<- test
if (class(variables) == "character"){ # If only one variable provided then make it into a list
variables <- list(variables)
}
variables<-test
if (class(variables) == "character"){ # If only one variable provided then make it into a list
variables <- list(variables)
}
names(variables)
names(variabes)<-test
names(variables)<-test
names(variables)
individuals <- data.frame(test=rep(1,100),)
individuals <- data.frame(test=rep(1,100),poo=4)
if (all(!variables %in% names(individuals))) {
print(paste0(
variables[!variables %in% names(variables)],
" missing from df. They are not included in probabilities."
))
}
variables <- "boob"
if (class(variables) == "character"){ # If only one variable provided then make it into a list
tmp <- list(variables)
names(tmp)<-variables
varaibles<-tmp
}
if (class(variables) == "character"){ # If only one variable provided then make it into a list
tmp <- list(variables)
names(tmp)<-variables
variables<-tmp
}
if (all(!variables %in% names(individuals))) {
print(paste0(
variables[!variables %in% names(variables)],
" missing from df. They are not included in probabilities."
))
}
if (all(!variables %in% names(individuals))) {
print(paste0(
variables[!variables %in% names(individuals)],
" missing from df. They are not included in probabilities."
))
}
if (all(!variables %in% names(individuals))) {
print(paste0(
variables[!variables %in% names(individuals)],
" missing from df. Possible columns to use are", names(individuals)
))
}
if (all(!variables %in% names(individuals))) {
print(paste0(
variables[!variables %in% names(individuals)],
" missing from df. Possible columns to use are ", names(individuals)
))
}
names(individuals)
if (all(!variables %in% names(individuals))) {
print(paste(
variables[!variables %in% names(individuals)],
"missing from df. Possible columns to use are", names(individuals)
))
}
# Check the columns exist in the dataframe
if (all(!variables %in% names(individuals))) {
print(paste(variables[!variables %in% names(individuals)],
"missing from df. Possible columns to use are"))
print(paste(names(individuals)))
}
?python
?add_subplot
?subplot
length(variables)
?histogram
MicrosimAnalysis <- setRefClass(
"MicrosimAnalysis",
#fields = list(
#    x = "ANY",
#    y = "numeric",
#    z = "character"
#),
methods = list(
population_distribution = function(cls, individuals, variables){
#Create a frequency distribtion of the population, using the given variable
#param individuals: The DataFrame of the individual population
#param variable: The variable(s) (DataFrame column(s)) on which to create a histogram. Either a single
#string variable or a list of variables.
#return: The matplotlib Figure object.
if (class(variables) == "character"){ # If only one variable provided then make it into a list
tmp <- list(variables)
names(tmp)<-variables
variables<-tmp
}
# Check the columns exist in the dataframe
if (all(!variables %in% names(individuals))) {
print(paste(variables[!variables %in% names(individuals)],
"missing from df. Possible columns to use are:"))
print(paste(names(individuals)))
}
# Create main plot object
#fig = plt.figure(figsize=(12, 14))
#fig.tight_layout()
# Now add 'sub plots', i.e. plots for each of the variables
num_plots <- length(variables)
par(mfrow=c(num_plots,1))
# Iterate over each variable, getting a counter (i) and the variable name (var)
for (i in 1:num_plots){
# Create a new subplot. Currently one column with a new row for each plot.
#ax = fig.add_subplot(len(variables), 1, i+1) # (rows, cols, index) (index used to distinguish each subplot)
# Subset the data using pandas.loc. Keep all rows but only select the column we want
data <- individuals[, var]
hist(data, main=paste("Histogram of", var))
}
return(fig)
}
)
)
test <-MicrosimAnalysis()
test
?setRefClass
install.packages("dlm")
library(dlm)
data(NelPlo)
buildSu <- function(x) {
Vsd <- exp(x[1:2])
Vcorr <- tanh(x[3])
V <- Vsd %o% Vsd
V[1,2] <- V[2,1] <- V[1,2] * Vcorr
Wsd <- exp(x[4:5])
Wcorr <- tanh(x[6])
W <- Wsd %o% Wsd
W[1,2] <- W[2,1] <- W[1,2] * Wcorr
return(list(
m0 = rep(0,2),
C0 = 1e7 * diag(2),
FF = diag(2),
GG = diag(2),
V = V,
W = W))
}
suMLE <- dlmMLE(NelPlo, rep(0,6), buildSu); suMLE
buildSu(suMLE$par)[c("V","W")]
StructTS(NelPlo[,1], type="level") ## compare with W[1,1] and V[1,1]
StructTS(NelPlo[,2], type="level") ## compare with W[2,2] and V[2,2]
buildSu()
buildSu(1)
buildSu(suMLE$par)[c("V","W")]
suMLE
library(dlm)
data(NelPlo)
#library(ggplot2)
#library(sf)
#library(viridisLite)
library(reticulate)
library(tidyr)
library(tidyr)
library(janitor)
library(readr)
library(mixdist)
setwd("/Users/JA610/Documents/GitHub/RAMP-UA/")
source("R/py_int/covid_status_functions.R")
source("R/py_int/initialize_and_helper_functions.R")
#beta1 <- current_risk /  danger <- 0.55
pop <- read.csv("~/Downloads/individuals_reduced.csv")
population <- clean_names(pop)
num_sample <- nrow(population)
print(num_sample)
area <- "area"
hid <- "house_id"
#pid <- "pid"
age <- "age1"
sex <- "sex"
id <- "id"
population_in <- population #%>%
population_in$cases_per_area <- 0
population_in$disease_status <- 0
print("c")
df_cr_in <-create_input(micro_sim_pop  = population_in,
num_sample = num_sample,
pnothome_multiplier = 0.6,   # 0.1 = a 60% reduction in time people not home
vars = c(area,   # must match columns in the population data.frame
hid,
#pid,
id,
age,
sex,
"current_risk"))
df_in <- as_betas_devon(population_sample = df_cr_in,
id = id,
age = age,
sex = sex,
beta0_fixed = -4, #0.19, #-9.5,
divider = 4)  # adding in the age/sex betas
print("e")
pnothome <-  0.25 #0.35
connectivity_index <- 0.25#0.3 doesn't work
log_pop_dens <- 0#0.2#0.4#0.3 #0.175
cases_per_area <- 10 #2.5
current_risk <- 0.55
origin <- factor(c(0,0,0,0,0))
names(origin) <- c("1", "2", "3", "4", "5") #1 = white, 2 = black, 3 = asian, 4 = mixed, 5 = other
qimd1 <- factor(c(0,0,0,0,0))
names(qimd1) <- c("1", "2", "3", "4", "5")# 1  = Least Deprived ... 5 = Most Deprived
underlining <- factor(c(0,0))
names(underlining) <- c("0","1") #1 = has underlying health conditions
hid_infected <- 0
other_betas <- list(current_risk = current_risk)
df_msoa <- df_in
df_risk <- list()
print("f")
df_prob <- covid_prob(df = df_msoa, betas = other_betas)
df_ass <- case_assign(df = df_prob, with_optimiser = FALSE)
df = df_prob
with_optimiser = FALSE
print("assign cases")
susceptible <- which(df$status == 0)
if (with_optimiser) {
df$new_status[susceptible] <- rbinom(n = length(susceptible),
size = 1,
prob = df$optim_probability[susceptible])
} else{
print("nop")
df$new_status[susceptible] <- rbinom(n = length(susceptible),
size = 1,
prob = df$probability[susceptible])
}
population <- clean_names(pop)
num_sample <- nrow(population)
print(num_sample)
area <- "area"
hid <- "house_id"
#pid <- "pid"
age <- "age1"
sex <- "sex"
id <- "id"
population_in <- population #%>%
population_in$cases_per_area <- 0
print("c")
df_cr_in <-create_input(micro_sim_pop  = population_in,
num_sample = num_sample,
pnothome_multiplier = 0.6,   # 0.1 = a 60% reduction in time people not home
vars = c(area,   # must match columns in the population data.frame
hid,
#pid,
id,
age,
sex,
"current_risk"))
df_in <- as_betas_devon(population_sample = df_cr_in,
id = id,
age = age,
sex = sex,
beta0_fixed = -4, #0.19, #-9.5,
divider = 4)  # adding in the age/sex betas
print("e")
pnothome <-  0.25 #0.35
connectivity_index <- 0.25#0.3 doesn't work
log_pop_dens <- 0#0.2#0.4#0.3 #0.175
cases_per_area <- 10 #2.5
current_risk <- 0.55
origin <- factor(c(0,0,0,0,0))
names(origin) <- c("1", "2", "3", "4", "5") #1 = white, 2 = black, 3 = asian, 4 = mixed, 5 = other
qimd1 <- factor(c(0,0,0,0,0))
names(qimd1) <- c("1", "2", "3", "4", "5")# 1  = Least Deprived ... 5 = Most Deprived
underlining <- factor(c(0,0))
names(underlining) <- c("0","1") #1 = has underlying health conditions
hid_infected <- 0
other_betas <- list(current_risk = current_risk)
df_msoa <- df_in
df_risk <- list()
print("f")
df_prob <- covid_prob(df = df_msoa, betas = other_betas)
df_ass <- case_assign(df = df_prob, with_optimiser = FALSE)
df_inf <- infection_length(df = df_ass,
presymp_dist = "weibull",
presymp_mean = 6.4,
presymp_sd = 2.3,
infection_dist = "normal",
infection_mean =  14,
infection_sd = 2)
df_rec <- removed(df = df_inf, chance_recovery = 0.95)
df_msoa <- df_rec #area_cov(df = df_rec, area = area, hid = hid)
print("h")
df_out <- data.frame(area=df_msoa$area,
ID=df_msoa$id,
house_id=df_msoa$house_id,
disease_status=df_msoa$new_status,
presymp_days=df_msoa$presymp_days,
symp_days=df_msoa$symp_days)
