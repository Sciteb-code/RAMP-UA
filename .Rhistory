variables[!variables %in% names(variables)],
" missing from df. They are not included in probabilities."
))
}
variables <- "boob"
if (class(variables) == "character"){ # If only one variable provided then make it into a list
tmp <- list(variables)
names(tmp)<-variables
varaibles<-tmp
}
if (class(variables) == "character"){ # If only one variable provided then make it into a list
tmp <- list(variables)
names(tmp)<-variables
variables<-tmp
}
if (all(!variables %in% names(individuals))) {
print(paste0(
variables[!variables %in% names(variables)],
" missing from df. They are not included in probabilities."
))
}
if (all(!variables %in% names(individuals))) {
print(paste0(
variables[!variables %in% names(individuals)],
" missing from df. They are not included in probabilities."
))
}
if (all(!variables %in% names(individuals))) {
print(paste0(
variables[!variables %in% names(individuals)],
" missing from df. Possible columns to use are", names(individuals)
))
}
if (all(!variables %in% names(individuals))) {
print(paste0(
variables[!variables %in% names(individuals)],
" missing from df. Possible columns to use are ", names(individuals)
))
}
names(individuals)
if (all(!variables %in% names(individuals))) {
print(paste(
variables[!variables %in% names(individuals)],
"missing from df. Possible columns to use are", names(individuals)
))
}
# Check the columns exist in the dataframe
if (all(!variables %in% names(individuals))) {
print(paste(variables[!variables %in% names(individuals)],
"missing from df. Possible columns to use are"))
print(paste(names(individuals)))
}
?python
?add_subplot
?subplot
length(variables)
?histogram
MicrosimAnalysis <- setRefClass(
"MicrosimAnalysis",
#fields = list(
#    x = "ANY",
#    y = "numeric",
#    z = "character"
#),
methods = list(
population_distribution = function(cls, individuals, variables){
#Create a frequency distribtion of the population, using the given variable
#param individuals: The DataFrame of the individual population
#param variable: The variable(s) (DataFrame column(s)) on which to create a histogram. Either a single
#string variable or a list of variables.
#return: The matplotlib Figure object.
if (class(variables) == "character"){ # If only one variable provided then make it into a list
tmp <- list(variables)
names(tmp)<-variables
variables<-tmp
}
# Check the columns exist in the dataframe
if (all(!variables %in% names(individuals))) {
print(paste(variables[!variables %in% names(individuals)],
"missing from df. Possible columns to use are:"))
print(paste(names(individuals)))
}
# Create main plot object
#fig = plt.figure(figsize=(12, 14))
#fig.tight_layout()
# Now add 'sub plots', i.e. plots for each of the variables
num_plots <- length(variables)
par(mfrow=c(num_plots,1))
# Iterate over each variable, getting a counter (i) and the variable name (var)
for (i in 1:num_plots){
# Create a new subplot. Currently one column with a new row for each plot.
#ax = fig.add_subplot(len(variables), 1, i+1) # (rows, cols, index) (index used to distinguish each subplot)
# Subset the data using pandas.loc. Keep all rows but only select the column we want
data <- individuals[, var]
hist(data, main=paste("Histogram of", var))
}
return(fig)
}
)
)
test <-MicrosimAnalysis()
test
?setRefClass
install.packages("dlm")
library(dlm)
data(NelPlo)
buildSu <- function(x) {
Vsd <- exp(x[1:2])
Vcorr <- tanh(x[3])
V <- Vsd %o% Vsd
V[1,2] <- V[2,1] <- V[1,2] * Vcorr
Wsd <- exp(x[4:5])
Wcorr <- tanh(x[6])
W <- Wsd %o% Wsd
W[1,2] <- W[2,1] <- W[1,2] * Wcorr
return(list(
m0 = rep(0,2),
C0 = 1e7 * diag(2),
FF = diag(2),
GG = diag(2),
V = V,
W = W))
}
suMLE <- dlmMLE(NelPlo, rep(0,6), buildSu); suMLE
buildSu(suMLE$par)[c("V","W")]
StructTS(NelPlo[,1], type="level") ## compare with W[1,1] and V[1,1]
StructTS(NelPlo[,2], type="level") ## compare with W[2,2] and V[2,2]
buildSu()
buildSu(1)
buildSu(suMLE$par)[c("V","W")]
suMLE
library(dlm)
data(NelPlo)
#library(ggplot2)
#library(sf)
#library(viridisLite)
library(reticulate)
library(tidyr)
library(tidyr)
library(janitor)
library(readr)
library(mixdist)
#library(arrow)
#library(dplyr)
#library(ggplot2)
#library(sf)
#library(viridisLite)
library(reticulate)
setwd("/Users/JA610/Documents/GitHub/RAMP-UA/")
source("R/py_int/covid_status_functions.R")
source("R/py_int/initialize_and_helper_functions.R")
reticulate::source_python("microsim/microsim_model_JESSE.py")
reticulate::source_python("microsim/microsim_model_JESSE.py")
pull_pop <- function(data_dir="data") {
population <- pop_init(data_dir)
return(population)
}
pop <- pull_pop()
population <- clean_names(pop)
reticulate::source_python("microsim/microsim_model_JESSE.py")
pull_pop <- function(data_dir="data") {
population <- pop_init(data_dir)
return(population)
}
pop <- pull_pop()
colnames(pop)
population <- clean_names(pop)
num_sample <- nrow(population)
area <- "area"
hid <- "hid"
pid <- "pid"
age <- "age1"
sex <- "sex"
population_in <- population #%>%
population_in$cases_per_area <- 0
df_cr_in <-create_input(micro_sim_pop  = population_in,
num_sample = num_sample,
pnothome_multiplier = 0.6,   # 0.1 = a 60% reduction in time people not home
vars = c(area,   # must match columns in the population data.frame
hid,
pid,
age,
sex,
"current_risk"))
df_in <- as_betas_devon(population_sample = df_cr_in,
pid = pid,
age = age,
sex = sex,
beta0_fixed = -9.5,
divider = 4)  # adding in the age/sex betas
pnothome <-  0.25 #0.35
connectivity_index <- 0.25#0.3 doesn't work
log_pop_dens <- 0#0.2#0.4#0.3 #0.175
cases_per_area <- 10 #2.5
origin <- factor(c(0,0,0,0,0))
names(origin) <- c("1", "2", "3", "4", "5") #1 = white, 2 = black, 3 = asian, 4 = mixed, 5 = other
qimd1 <- factor(c(0,0,0,0,0))
names(qimd1) <- c("1", "2", "3", "4", "5")# 1  = Least Deprived ... 5 = Most Deprived
underlining <- factor(c(0,0))
names(underlining) <- c("0","1") #1 = has underlying health conditions
hid_infected <- 0
current_risk <- 0
other_betas <- list(pnothome = pnothome,
cases_per_area = cases_per_area,
connectivity_index = connectivity_index)
df_msoa <- df_in
df_risk <- list()
df_prob <- covid_prob(df = df_msoa, betas = other_betas)
df_ass <- case_assign(df = df_prob, with_optimiser = FALSE)
df_inf <- infection_length(df = df_ass,
presymp_dist = "weibull",
presymp_mean = 6.4,
presymp_sd = 2.3,
infection_dist = "normal",
infection_mean =  14,
infection_sd = 2)
df_rec <- removed(df = df_inf, chance_recovery = 0.95)
df_msoa <- df_rec #area_cov(df = df_rec, area = area, hid = hid)
df_out <- data.frame(area=df_msoa$area,
pid=df_msoa$pid,
hid=df_msoa$hid,
Disease_Status=df_msoa$new_status,
presymp_days=df_msoa$presymp_days,
symp_days=df_msoa$symp_days)
View(df_out)
colnaes(pop)
colnames(pop)
pop$ID
df_cr_in <-create_input(micro_sim_pop  = population_in,
num_sample = num_sample,
pnothome_multiplier = 0.6,   # 0.1 = a 60% reduction in time people not home
vars = c(area,   # must match columns in the population data.frame
hid,
pid,
id,
age,
sex,
"current_risk"))
id < "ID"
population_in <- population #%>%
id <- "ID"
population_in <- population #%>%
population_in$cases_per_area <- 0
df_cr_in <-create_input(micro_sim_pop  = population_in,
num_sample = num_sample,
pnothome_multiplier = 0.6,   # 0.1 = a 60% reduction in time people not home
vars = c(area,   # must match columns in the population data.frame
hid,
pid,
id,
age,
sex,
"current_risk"))
id <- "id"
population_in <- population #%>%
population_in$cases_per_area <- 0
df_cr_in <-create_input(micro_sim_pop  = population_in,
num_sample = num_sample,
pnothome_multiplier = 0.6,   # 0.1 = a 60% reduction in time people not home
vars = c(area,   # must match columns in the population data.frame
hid,
pid,
id,
age,
sex,
"current_risk"))
df_in <- as_betas_devon(population_sample = df_cr_in,
pid = pid,
age = age,
sex = sex,
beta0_fixed = -9.5,
divider = 4)  # adding in the age/sex betas
pnothome <-  0.25 #0.35
connectivity_index <- 0.25#0.3 doesn't work
log_pop_dens <- 0#0.2#0.4#0.3 #0.175
cases_per_area <- 10 #2.5
origin <- factor(c(0,0,0,0,0))
names(origin) <- c("1", "2", "3", "4", "5") #1 = white, 2 = black, 3 = asian, 4 = mixed, 5 = other
qimd1 <- factor(c(0,0,0,0,0))
names(qimd1) <- c("1", "2", "3", "4", "5")# 1  = Least Deprived ... 5 = Most Deprived
underlining <- factor(c(0,0))
names(underlining) <- c("0","1") #1 = has underlying health conditions
hid_infected <- 0
current_risk <- 0
other_betas <- list(pnothome = pnothome,
cases_per_area = cases_per_area,
connectivity_index = connectivity_index)
df_msoa <- df_in
df_risk <- list()
df_prob <- covid_prob(df = df_msoa, betas = other_betas)
df_ass <- case_assign(df = df_prob, with_optimiser = FALSE)
df_inf <- infection_length(df = df_ass,
presymp_dist = "weibull",
presymp_mean = 6.4,
presymp_sd = 2.3,
infection_dist = "normal",
infection_mean =  14,
infection_sd = 2)
df_rec <- removed(df = df_inf, chance_recovery = 0.95)
df_msoa <- df_rec #area_cov(df = df_rec, area = area, hid = hid)
df_out <- data.frame(area=df_msoa$area,
ID=df_msoa$id,
hid=df_msoa$hid,
Disease_Status=df_msoa$new_status,
presymp_days=df_msoa$presymp_days,
symp_days=df_msoa$symp_days)
View(df_out)
pop <- read.csv("~/Downloads/individuals_reduced.csv")
View(pop)
View(pop)
population <- clean_names(pop)
View(population)
num_sample <- nrow(population)
population <- clean_names(pop)
num_sample <- nrow(population)
area <- "area"
hid <- "house_id"
#pid <- "pid"
age <- "age1"
sex <- "sex"
id <- "id"
population_in <- population #%>%
population_in$cases_per_area <- 0
df_cr_in <-create_input(micro_sim_pop  = population_in,
num_sample = num_sample,
pnothome_multiplier = 0.6,   # 0.1 = a 60% reduction in time people not home
vars = c(area,   # must match columns in the population data.frame
hid,
#pid,
id,
age,
sex,
"current_risk",
"pnothome"))
source("R/py_int/covid_status_functions.R")
source("R/py_int/initialize_and_helper_functions.R")
population <- clean_names(pop)
num_sample <- nrow(population)
area <- "area"
hid <- "house_id"
#pid <- "pid"
age <- "age1"
sex <- "sex"
id <- "id"
population_in <- population #%>%
population_in$cases_per_area <- 0
df_cr_in <-create_input(micro_sim_pop  = population_in,
num_sample = num_sample,
pnothome_multiplier = 0.6,   # 0.1 = a 60% reduction in time people not home
vars = c(area,   # must match columns in the population data.frame
hid,
#pid,
id,
age,
sex,
"current_risk",
"pnothome"))
df_in <- as_betas_devon(population_sample = df_cr_in,
id = id,
age = age,
sex = sex,
beta0_fixed = -9.5,
divider = 4)  # adding in the age/sex betas
df_cr_in <-create_input(micro_sim_pop  = population_in,
num_sample = num_sample,
pnothome_multiplier = 0.6,   # 0.1 = a 60% reduction in time people not home
vars = c(area,   # must match columns in the population data.frame
hid,
#pid,
id,
age,
sex,
"current_risk",
"pnothome"))
source("R/py_int/covid_status_functions.R")
source("R/py_int/initialize_and_helper_functions.R")
df_cr_in <-create_input(micro_sim_pop  = population_in,
num_sample = num_sample,
pnothome_multiplier = 0.6,   # 0.1 = a 60% reduction in time people not home
vars = c(area,   # must match columns in the population data.frame
hid,
#pid,
id,
age,
sex,
"current_risk",
"pnothome"))
population_in$Disease_Status <- 0
df_cr_in <-create_input(micro_sim_pop  = population_in,
num_sample = num_sample,
pnothome_multiplier = 0.6,   # 0.1 = a 60% reduction in time people not home
vars = c(area,   # must match columns in the population data.frame
hid,
#pid,
id,
age,
sex,
"current_risk",
"pnothome"))
df_in <- as_betas_devon(population_sample = df_cr_in,
id = id,
age = age,
sex = sex,
beta0_fixed = -9.5,
divider = 4)  # adding in the age/sex betas
#########################################
#### for age sex betas - needs making more listy
as_betas_devon <- function(population_sample,id, age, sex, beta0_fixed = NULL, divider = 1){
if (length(unique(population_sample$age1)) == 6){
fixed_risks <- data.frame(id = population_sample[[id]],
age=population_sample[[age]],
sex=population_sample[[sex]],
beta0 = beta0_fixed,#-7.8100663,
age_risk = 0,
sex_risk = 0,
tot_risk=0)
fixed_risks$sex_risk[fixed_risks$sex %in% c(0)] <- 0.1297575
fixed_risks$sex_risk[fixed_risks$sex %in% c(1)] <- 0
fixed_risks$age_risk[fixed_risks$age %in% c(1)] <- -2.2464676 #0-18
fixed_risks$age_risk[fixed_risks$age %in% c(2)] <- -0.7057833 #19-29
fixed_risks$age_risk[fixed_risks$age %in% c(3)] <- 0 #30-44
fixed_risks$age_risk[fixed_risks$age %in% c(4)] <- 0.3134440 ##45-59
fixed_risks$age_risk[fixed_risks$age %in% c(5)] <- 0.1095025  #60-74
fixed_risks$age_risk[fixed_risks$age %in% c(6)] <- 0.8089118 #75+
}
if (length(unique(population_sample$age1)) == 21){
# we can define fixed risks here for things like age and sex because they won't change
fixed_risks <- data.frame(id = population_sample[[id]],
age=population_sample[[age]],
sex=population_sample[[sex]],
beta0 = -8.79806350,
age_risk = 0,
sex_risk = 0,
tot_risk=0)
fixed_risks$sex_risk[fixed_risks$sex %in% c(0)] <- 0.06342251
fixed_risks$sex_risk[fixed_risks$sex %in% c(1)] <- 0
fixed_risks$age_risk[fixed_risks$age %in% c(1,2)] <- -2.40598996 #uk_age$`0 to 4`/(sum(pop_proportion[1:2]))
fixed_risks$age_risk[fixed_risks$age %in% c(3)] <- -3.53175768 #uk_age$`5 to 9`/(sum(pop_proportion[3:4]))
fixed_risks$age_risk[fixed_risks$age %in% c(4)] <- -3.53175768  #uk_age$`5 to 9`/(sum(pop_proportion[3:4]))
fixed_risks$age_risk[fixed_risks$age %in% c(5)] <- -3.22625283  #uk_age$`10 to 14`/(sum(pop_proportion[5:6]))
fixed_risks$age_risk[fixed_risks$age %in% c(6)] <- -3.22625283  #uk_age$`10 to 14`/(sum(pop_proportion[5:6]))
fixed_risks$age_risk[fixed_risks$age %in% c(7)] <- -2.25605530 #uk_age$`15 to 19`/pop_proportion[7]
fixed_risks$age_risk[fixed_risks$age %in% c(8)] <- -0.85396607 #uk_age$`20 to 24`/pop_proportion[8]
fixed_risks$age_risk[fixed_risks$age %in% c(9)] <- -0.03909346 #uk_age$`25 to 29`/pop_proportion[9]
fixed_risks$age_risk[fixed_risks$age %in% c(10)] <- 0 #uk_age$`30 to 34`/pop_proportion[10]
fixed_risks$age_risk[fixed_risks$age %in% c(11)] <- -0.10794990 #uk_age$`35 to 39`/pop_proportion[11]
fixed_risks$age_risk[fixed_risks$age %in% c(12)] <- 0.01160390 #uk_age$`40 to 44`/pop_proportion[12]
fixed_risks$age_risk[fixed_risks$age %in% c(13)] <- 0.22233288 #uk_age$`45 to 49`/pop_proportion[13]
fixed_risks$age_risk[fixed_risks$age %in% c(14)] <- 0.34896150  #uk_age$`50 to 54`/pop_proportion[14]
fixed_risks$age_risk[fixed_risks$age %in% c(15)] <- 0.32741268  #uk_age$`55 to 59`/pop_proportion[15]
fixed_risks$age_risk[fixed_risks$age %in% c(16)] <- 0.15543211 #uk_age$`60 to 64`/pop_proportion[16]
fixed_risks$age_risk[fixed_risks$age %in% c(17)] <- -0.02426055 #uk_age$`65 to 69`/pop_proportion[17]
fixed_risks$age_risk[fixed_risks$age %in% c(18)] <- 0.17828771 #uk_age$`70 to 74`/pop_proportion[18]
fixed_risks$age_risk[fixed_risks$age %in% c(19)] <- 0.35265420  #uk_age$`75 to 79`/pop_proportion[19]
fixed_risks$age_risk[fixed_risks$age %in% c(20)] <- 0.52873351   #uk_age$`80 to 84`/pop_proportion[20]
fixed_risks$age_risk[fixed_risks$age %in% c(21)] <- 1.12327274 #uk_age$`20`/pop_proportion[21]
}
fixed_risks$as_risk <-  (fixed_risks$sex_risk/divider) + (fixed_risks$age_risk/divider)
fixed_risks$tot_risk <- fixed_risks$beta0 + fixed_risks$sex_risk + fixed_risks$age_risk
fixed_risks$prob_case <- exp(fixed_risks$tot_risk)/(1+exp(fixed_risks$tot_risk))
population_sample$beta0 <- fixed_risks$beta0
population_sample$as_risk <- fixed_risks$as_risk
return(population_sample)
}
df_in <- as_betas_devon(population_sample = df_cr_in,
id = id,
age = age,
sex = sex,
beta0_fixed = -9.5,
divider = 4)  # adding in the age/sex betas
pnothome <-  0.25 #0.35
connectivity_index <- 0.25#0.3 doesn't work
log_pop_dens <- 0#0.2#0.4#0.3 #0.175
cases_per_area <- 10 #2.5
origin <- factor(c(0,0,0,0,0))
names(origin) <- c("1", "2", "3", "4", "5") #1 = white, 2 = black, 3 = asian, 4 = mixed, 5 = other
qimd1 <- factor(c(0,0,0,0,0))
names(qimd1) <- c("1", "2", "3", "4", "5")# 1  = Least Deprived ... 5 = Most Deprived
underlining <- factor(c(0,0))
names(underlining) <- c("0","1") #1 = has underlying health conditions
hid_infected <- 0
current_risk <- 0
other_betas <- list(pnothome = pnothome,
cases_per_area = cases_per_area,
connectivity_index = connectivity_index)
df_msoa <- df_in
df_risk <- list()
df_prob <- covid_prob(df = df_msoa, betas = other_betas)
df_ass <- case_assign(df = df_prob, with_optimiser = FALSE)
df_inf <- infection_length(df = df_ass,
presymp_dist = "weibull",
presymp_mean = 6.4,
presymp_sd = 2.3,
infection_dist = "normal",
infection_mean =  14,
infection_sd = 2)
df_rec <- removed(df = df_inf, chance_recovery = 0.95)
df_msoa <- df_rec #area_cov(df = df_rec, area = area, hid = hid)
df_out <- data.frame(area=df_msoa$area,
ID=df_msoa$id,
hid=df_msoa$hid,
Disease_Status=df_msoa$new_status,
presymp_days=df_msoa$presymp_days,
symp_days=df_msoa$symp_days)
View(df_out)
View(pop)
df_out <- data.frame(area=df_msoa$area,
ID=df_msoa$id,
hid=df_msoa$house_id,
Disease_Status=df_msoa$new_status,
presymp_days=df_msoa$presymp_days,
symp_days=df_msoa$symp_days)
