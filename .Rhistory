}
population <- clean_names(pop)
num_sample <- nrow(population)
print(num_sample)
area <- "area"
hid <- "house_id"
#pid <- "pid"
age <- "age1"
sex <- "sex"
id <- "id"
population_in <- population #%>%
population_in$cases_per_area <- 0
print("c")
df_cr_in <-create_input(micro_sim_pop  = population_in,
num_sample = num_sample,
pnothome_multiplier = 0.6,   # 0.1 = a 60% reduction in time people not home
vars = c(area,   # must match columns in the population data.frame
hid,
#pid,
id,
age,
sex,
"current_risk"))
df_in <- as_betas_devon(population_sample = df_cr_in,
id = id,
age = age,
sex = sex,
beta0_fixed = -4, #0.19, #-9.5,
divider = 4)  # adding in the age/sex betas
print("e")
pnothome <-  0.25 #0.35
connectivity_index <- 0.25#0.3 doesn't work
log_pop_dens <- 0#0.2#0.4#0.3 #0.175
cases_per_area <- 10 #2.5
current_risk <- 0.55
origin <- factor(c(0,0,0,0,0))
names(origin) <- c("1", "2", "3", "4", "5") #1 = white, 2 = black, 3 = asian, 4 = mixed, 5 = other
qimd1 <- factor(c(0,0,0,0,0))
names(qimd1) <- c("1", "2", "3", "4", "5")# 1  = Least Deprived ... 5 = Most Deprived
underlining <- factor(c(0,0))
names(underlining) <- c("0","1") #1 = has underlying health conditions
hid_infected <- 0
current_risk <- 0
other_betas <- list(pnothome = pnothome,
cases_per_area = cases_per_area,
connectivity_index = connectivity_index,
current_risk = current_risk)
df_msoa <- df_in
df_risk <- list()
print("f")
df_prob <- covid_prob(df = df_msoa, betas = other_betas)
betas = other_betas
betas
other_betas <- list(pnothome = pnothome,
cases_per_area = cases_per_area,
connectivity_index = connectivity_index,
current_risk = current_risk)
betas = other_betas
betas
current_risk <- 0.55
origin <- factor(c(0,0,0,0,0))
names(origin) <- c("1", "2", "3", "4", "5") #1 = white, 2 = black, 3 = asian, 4 = mixed, 5 = other
qimd1 <- factor(c(0,0,0,0,0))
names(qimd1) <- c("1", "2", "3", "4", "5")# 1  = Least Deprived ... 5 = Most Deprived
underlining <- factor(c(0,0))
names(underlining) <- c("0","1") #1 = has underlying health conditions
hid_infected <- 0
other_betas <- list(pnothome = pnothome,
cases_per_area = cases_per_area,
connectivity_index = connectivity_index,
current_risk = current_risk)
betas = other_betas
betas
df = df_msoa
print("assign probabilities")
beta_names <- names(betas)
if (all(!beta_names %in% names(df))) {
print(paste0(
beta_names[!beta_names %in% names(df)],
" missing from df. They are not included in probabilities."
))
}
beta_names <- beta_names[beta_names %in% names(df)]
if (length(beta_names) > 0 ){
beta_out <- lapply(X = beta_names, FUN = beta_make, timestep = timestep-1, betas=betas,df=df)
beta_out <- do.call(cbind, beta_out)
colnames(beta_out) <- beta_names
beta_out_sums <- rowSums(beta_out)
} else{
beta_out_sums <- 0
}
beta_out_sums
beta_names
betas
if (all(!beta_names %in% names(df))) {
print(paste0(
beta_names[!beta_names %in% names(df)],
" missing from df. They are not included in probabilities."
))
}
if (length(beta_names) > 0 ){
beta_out <- lapply(X = beta_names, FUN = beta_make, timestep = timestep-1, betas=betas,df=df)
beta_out <- do.call(cbind, beta_out)
colnames(beta_out) <- beta_names
beta_out_sums <- rowSums(beta_out)
} else{
beta_out_sums <- 0
}
beta_out
other_betas <- list(current_risk = current_risk)
betas = other_betas
print("assign probabilities")
beta_names <- names(betas)
if (all(!beta_names %in% names(df))) {
print(paste0(
beta_names[!beta_names %in% names(df)],
" missing from df. They are not included in probabilities."
))
}
beta_names <- beta_names[beta_names %in% names(df)]
if (length(beta_names) > 0 ){
beta_out <- lapply(X = beta_names, FUN = beta_make, timestep = timestep-1, betas=betas,df=df)
beta_out <- do.call(cbind, beta_out)
colnames(beta_out) <- beta_names
beta_out_sums <- rowSums(beta_out)
} else{
beta_out_sums <- 0
}
beta_out
beta_out <- lapply(X = beta_names, FUN = beta_make, timestep = timestep-1, betas=betas,df=df)
beta_out
betas
if (length(beta_names) > 0 ){
beta_out <- lapply(X = beta_names, FUN = beta_make, timestep = timestep-1, betas=betas,df=df)
beta_out <- do.call(cbind, beta_out)
colnames(beta_out) <- beta_names
beta_out_sums <- rowSums(beta_out)
}
beta_out_sums
beta_names <- beta_names[beta_names %in% names(df)]
beta_names
beta_out <- lapply(X = beta_names, FUN = beta_make, betas=betas,df=df)
source("R/py_int/covid_status_functions.R")
source("R/py_int/initialize_and_helper_functions.R")
beta_out <- lapply(X = beta_names, FUN = beta_make, betas=betas,df=df)
beta_out
library(tidyr)
library(janitor)
library(readr)
library(mixdist)
source("R/py_int/covid_status_functions.R")
source("R/py_int/initialize_and_helper_functions.R")
#beta1 <- current_risk /  danger <- 0.55
pop <- read.csv("~/Downloads/individuals_reduced.csv")
population <- clean_names(pop)
num_sample <- nrow(population)
print(num_sample)
area <- "area"
hid <- "house_id"
#pid <- "pid"
age <- "age1"
sex <- "sex"
id <- "id"
population_in <- population #%>%
population_in$cases_per_area <- 0
print("c")
df_cr_in <-create_input(micro_sim_pop  = population_in,
num_sample = num_sample,
pnothome_multiplier = 0.6,   # 0.1 = a 60% reduction in time people not home
vars = c(area,   # must match columns in the population data.frame
hid,
#pid,
id,
age,
sex,
"current_risk"))
df_in <- as_betas_devon(population_sample = df_cr_in,
id = id,
age = age,
sex = sex,
beta0_fixed = -4, #0.19, #-9.5,
divider = 4)  # adding in the age/sex betas
print("e")
pnothome <-  0.25 #0.35
connectivity_index <- 0.25#0.3 doesn't work
log_pop_dens <- 0#0.2#0.4#0.3 #0.175
cases_per_area <- 10 #2.5
current_risk <- 0.55
origin <- factor(c(0,0,0,0,0))
names(origin) <- c("1", "2", "3", "4", "5") #1 = white, 2 = black, 3 = asian, 4 = mixed, 5 = other
qimd1 <- factor(c(0,0,0,0,0))
names(qimd1) <- c("1", "2", "3", "4", "5")# 1  = Least Deprived ... 5 = Most Deprived
underlining <- factor(c(0,0))
names(underlining) <- c("0","1") #1 = has underlying health conditions
hid_infected <- 0
other_betas <- list(current_risk = current_risk)
df_msoa <- df_in
df_risk <- list()
print("f")
betas = other_betas
df = df_msoa
print("assign probabilities")
beta_names <- names(betas)
if (all(!beta_names %in% names(df))) {
print(paste0(
beta_names[!beta_names %in% names(df)],
" missing from df. They are not included in probabilities."
))
}
beta_names
beta_names <- beta_names[beta_names %in% names(df)]
beta_out <- lapply(X = beta_names, FUN = beta_make, betas=betas,df=df)
View(beta_out)
beta_out
source("R/py_int/covid_status_functions.R")
source("R/py_int/initialize_and_helper_functions.R")
beta_out <- lapply(X = beta_names, FUN = beta_make, betas=betas, df=df)
beta_out
df=df
betas=betas
name=beta_names
#dynamic betas with linear multiplier
if (is.matrix(df[[name]]) & length(betas[[name]])== 1){  #dynamic betas will be a matrix from the create_input function
y <- df[[name]] * betas[[name]]
}
y
#fixed betas with linear multiplier
if(!is.matrix(df[[name]]) & length(betas[[name]]) == 1){
y <- df[[name]] * betas[[name]]
}
y
df[[name]]
betas[[name]]
df_prob <- covid_prob(df = df_msoa, betas = other_betas)
df_ass <- case_assign(df = df_prob, with_optimiser = FALSE)
df_inf <- infection_length(df = df_ass,
presymp_dist = "weibull",
presymp_mean = 6.4,
presymp_sd = 2.3,
infection_dist = "normal",
infection_mean =  14,
infection_sd = 2)
df_rec <- removed(df = df_inf, chance_recovery = 0.95)
df_msoa <- df_rec #area_cov(df = df_rec, area = area, hid = hid)
print("h")
df_out <- data.frame(area=df_msoa$area,
ID=df_msoa$id,
house_id=df_msoa$house_id,
disease_status=df_msoa$new_status,
presymp_days=df_msoa$presymp_days,
symp_days=df_msoa$symp_days)
df_msoa$area
df_msoa$id
df_msoa$house_id
df_msoa$new_status
library(tidyr)
library(janitor)
library(readr)
library(mixdist)
source("R/py_int/covid_status_functions.R")
source("R/py_int/initialize_and_helper_functions.R")
#beta1 <- current_risk /  danger <- 0.55
pop <- read.csv("~/Downloads/individuals_reduced.csv")
population <- clean_names(pop)
num_sample <- nrow(population)
print(num_sample)
area <- "area"
hid <- "house_id"
#pid <- "pid"
age <- "age1"
sex <- "sex"
id <- "id"
population_in <- population #%>%
population_in$cases_per_area <- 0
print("c")
df_cr_in <-create_input(micro_sim_pop  = population_in,
num_sample = num_sample,
pnothome_multiplier = 0.6,   # 0.1 = a 60% reduction in time people not home
vars = c(area,   # must match columns in the population data.frame
hid,
#pid,
id,
age,
sex,
"current_risk"))
population_in$Disease_Status <- 0
print("c")
df_cr_in <-create_input(micro_sim_pop  = population_in,
num_sample = num_sample,
pnothome_multiplier = 0.6,   # 0.1 = a 60% reduction in time people not home
vars = c(area,   # must match columns in the population data.frame
hid,
#pid,
id,
age,
sex,
"current_risk"))
df_in <- as_betas_devon(population_sample = df_cr_in,
id = id,
age = age,
sex = sex,
beta0_fixed = -4, #0.19, #-9.5,
divider = 4)  # adding in the age/sex betas
print("e")
pnothome <-  0.25 #0.35
connectivity_index <- 0.25#0.3 doesn't work
log_pop_dens <- 0#0.2#0.4#0.3 #0.175
cases_per_area <- 10 #2.5
current_risk <- 0.55
origin <- factor(c(0,0,0,0,0))
names(origin) <- c("1", "2", "3", "4", "5") #1 = white, 2 = black, 3 = asian, 4 = mixed, 5 = other
qimd1 <- factor(c(0,0,0,0,0))
names(qimd1) <- c("1", "2", "3", "4", "5")# 1  = Least Deprived ... 5 = Most Deprived
underlining <- factor(c(0,0))
names(underlining) <- c("0","1") #1 = has underlying health conditions
hid_infected <- 0
other_betas <- list(current_risk = current_risk)
df_msoa <- df_in
df_risk <- list()
print("f")
df_prob <- covid_prob(df = df_msoa, betas = other_betas)
df_ass <- case_assign(df = df_prob, with_optimiser = FALSE)
df_inf <- infection_length(df = df_ass,
presymp_dist = "weibull",
presymp_mean = 6.4,
presymp_sd = 2.3,
infection_dist = "normal",
infection_mean =  14,
infection_sd = 2)
df_rec <- removed(df = df_inf, chance_recovery = 0.95)
df_msoa <- df_rec #area_cov(df = df_rec, area = area, hid = hid)
print("h")
df_out <- data.frame(area=df_msoa$area,
ID=df_msoa$id,
house_id=df_msoa$house_id,
disease_status=df_msoa$new_status,
presymp_days=df_msoa$presymp_days,
symp_days=df_msoa$symp_days)
area=df_msoa$area
View(df_msoa)
View(df_msoa)
population_in$disease_status <- 0
print("c")
df_cr_in <-create_input(micro_sim_pop  = population_in,
num_sample = num_sample,
pnothome_multiplier = 0.6,   # 0.1 = a 60% reduction in time people not home
vars = c(area,   # must match columns in the population data.frame
hid,
#pid,
id,
age,
sex,
"current_risk"))
df_in <- as_betas_devon(population_sample = df_cr_in,
id = id,
age = age,
sex = sex,
beta0_fixed = -4, #0.19, #-9.5,
divider = 4)  # adding in the age/sex betas
print("e")
pnothome <-  0.25 #0.35
connectivity_index <- 0.25#0.3 doesn't work
log_pop_dens <- 0#0.2#0.4#0.3 #0.175
cases_per_area <- 10 #2.5
current_risk <- 0.55
origin <- factor(c(0,0,0,0,0))
names(origin) <- c("1", "2", "3", "4", "5") #1 = white, 2 = black, 3 = asian, 4 = mixed, 5 = other
qimd1 <- factor(c(0,0,0,0,0))
names(qimd1) <- c("1", "2", "3", "4", "5")# 1  = Least Deprived ... 5 = Most Deprived
underlining <- factor(c(0,0))
names(underlining) <- c("0","1") #1 = has underlying health conditions
hid_infected <- 0
other_betas <- list(current_risk = current_risk)
df_msoa <- df_in
df_risk <- list()
print("f")
df_prob <- covid_prob(df = df_msoa, betas = other_betas)
df_ass <- case_assign(df = df_prob, with_optimiser = FALSE)
df_inf <- infection_length(df = df_ass,
presymp_dist = "weibull",
presymp_mean = 6.4,
presymp_sd = 2.3,
infection_dist = "normal",
infection_mean =  14,
infection_sd = 2)
df_rec <- removed(df = df_inf, chance_recovery = 0.95)
df_msoa <- df_rec #area_cov(df = df_rec, area = area, hid = hid)
print("h")
df_out <- data.frame(area=df_msoa$area,
ID=df_msoa$id,
house_id=df_msoa$house_id,
disease_status=df_msoa$new_status,
presymp_days=df_msoa$presymp_days,
symp_days=df_msoa$symp_days)
population_in$disease_status <- 0
print("c")
df_cr_in <-create_input(micro_sim_pop  = population_in,
num_sample = num_sample,
pnothome_multiplier = 0.6,   # 0.1 = a 60% reduction in time people not home
vars = c(area,   # must match columns in the population data.frame
hid,
#pid,
id,
age,
sex,
"current_risk"))
library(tidyr)
library(janitor)
library(readr)
library(mixdist)
source("R/py_int/covid_status_functions.R")
source("R/py_int/initialize_and_helper_functions.R")
#beta1 <- current_risk /  danger <- 0.55
pop <- read.csv("~/Downloads/individuals_reduced.csv")
population <- clean_names(pop)
num_sample <- nrow(population)
print(num_sample)
area <- "area"
hid <- "house_id"
#pid <- "pid"
age <- "age1"
sex <- "sex"
id <- "id"
population_in <- population #%>%
population_in$cases_per_area <- 0
population_in$disease_status <- 0
print("c")
df_cr_in <-create_input(micro_sim_pop  = population_in,
num_sample = num_sample,
pnothome_multiplier = 0.6,   # 0.1 = a 60% reduction in time people not home
vars = c(area,   # must match columns in the population data.frame
hid,
#pid,
id,
age,
sex,
"current_risk"))
df_in <- as_betas_devon(population_sample = df_cr_in,
id = id,
age = age,
sex = sex,
beta0_fixed = -4, #0.19, #-9.5,
divider = 4)  # adding in the age/sex betas
print("e")
pnothome <-  0.25 #0.35
connectivity_index <- 0.25#0.3 doesn't work
log_pop_dens <- 0#0.2#0.4#0.3 #0.175
cases_per_area <- 10 #2.5
current_risk <- 0.55
origin <- factor(c(0,0,0,0,0))
names(origin) <- c("1", "2", "3", "4", "5") #1 = white, 2 = black, 3 = asian, 4 = mixed, 5 = other
qimd1 <- factor(c(0,0,0,0,0))
names(qimd1) <- c("1", "2", "3", "4", "5")# 1  = Least Deprived ... 5 = Most Deprived
underlining <- factor(c(0,0))
names(underlining) <- c("0","1") #1 = has underlying health conditions
hid_infected <- 0
other_betas <- list(current_risk = current_risk)
df_msoa <- df_in
df_risk <- list()
print("f")
df_prob <- covid_prob(df = df_msoa, betas = other_betas)
df_ass <- case_assign(df = df_prob, with_optimiser = FALSE)
df_inf <- infection_length(df = df_ass,
presymp_dist = "weibull",
presymp_mean = 6.4,
presymp_sd = 2.3,
infection_dist = "normal",
infection_mean =  14,
infection_sd = 2)
df_rec <- removed(df = df_inf, chance_recovery = 0.95)
df_msoa <- df_rec #area_cov(df = df_rec, area = area, hid = hid)
df$symp_days[df$new_status == 2 & df$symp_days > 0]
df$symp_days
df_inf$symp_days
df<-df_inf
df$symp_days[df$new_status == 2]
df$symp_days[df$new_status == 2 & df$symp_days > 0]
df$symp_days[df$status == 2 & df$symp_days>0]
df$symp_days[df$new_status == 2 & df$symp_days > 0] <- df$symp_days[df$new_status == 2 & df$symp_days>0] - 1
df_prob <- covid_prob(df = df_msoa, betas = other_betas)
df_ass <- case_assign(df = df_prob, with_optimiser = FALSE)
df_inf <- infection_length(df = df_ass,
presymp_dist = "weibull",
presymp_mean = 6.4,
presymp_sd = 2.3,
infection_dist = "normal",
infection_mean =  14,
infection_sd = 2)
df_rec <- removed(df = df_inf, chance_recovery = 0.95)
#########################################
# determines if someone has been removed and if that removal is recovery or death
removed <- function(df, chance_recovery = 0.95){
removed_cases <- which(df$presymp_days == 0 & df$symp_days == 1)
df$new_status[removed_cases] <- 3 + rbinom(n = length(removed_cases),
size = 1,
prob = (1-chance_recovery))
df$symp_days[removed_cases] <- 0
df$presymp_days[df$presymp_days>0 & !is.na(df$presymp_days)] <- df$presymp_days[df$presymp_days>0 & !is.na(df$presymp_days)] - 1
df$symp_days[df$new_status == 2 & df$symp_days > 0] <- df$symp_days[df$new_status == 2 & df$symp_days>0] - 1
return(df)
}
df_prob <- covid_prob(df = df_msoa, betas = other_betas)
df_ass <- case_assign(df = df_prob, with_optimiser = FALSE)
df_inf <- infection_length(df = df_ass,
presymp_dist = "weibull",
presymp_mean = 6.4,
presymp_sd = 2.3,
infection_dist = "normal",
infection_mean =  14,
infection_sd = 2)
df_rec <- removed(df = df_inf, chance_recovery = 0.95)
df_msoa <- df_rec #area_cov(df = df_rec, area = area, hid = hid)
