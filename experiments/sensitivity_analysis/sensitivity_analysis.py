#!/usr/bin/env python
# coding: utf-8

# # Sensitivity Analysis with the OpenCL RAMP model

# ### Import opencl modules

# In[1]:


import multiprocessing as mp
import numpy as np
import yaml # pyyaml library for reading the parameters.yml file
import os
import pandas as pd
import unittest
import pickle
import copy
import matplotlib.pyplot as plt

from microsim.opencl.ramp.run import run_headless
from microsim.opencl.ramp.snapshot_convertor import SnapshotConvertor
from microsim.opencl.ramp.snapshot import Snapshot
from microsim.opencl.ramp.params import Params, IndividualHazardMultipliers, LocationHazardMultipliers
from microsim.opencl.ramp.simulator import Simulator
from microsim.opencl.ramp.disease_statuses import DiseaseStatus

import sys
sys.path.append('..')
#import experiments_functions  # For the ones outside the class
from opencl_runner import OpenCLRunner # Some additional notebook-specific functions required (functions.py)

# Useful for connecting to this kernel
#%connect_info


# ### Setup params for all runs

# Read the parameters file

# Prepare the parameters for the OpenCL model. (See [main.py](https://github.com/Urban-Analytics/RAMP-UA/blob/052861cc51be5bc1827c85bb827209f0df73c685/microsim/main.py#L262) for an example of how this is done in the code). 

# In[2]:


PARAMETERS_FILE = os.path.join("../../","model_parameters", "default.yml")
PARAMS = OpenCLRunner.create_parameters(parameters_file=PARAMETERS_FILE)


# ### Get snapshot path
# **NB** this is the path to the OpenCL snapshot file generated by running `microsim/main.py`. You need to initilaise the model at least once to create the snapshot. The following says 'run in opencl mode and stop once initialisation has finished':
# 
# ```
# python microsim/main.py -ocl -init
# ```

# In[3]:


OPENCL_DIR = "../../microsim/opencl"
SNAPSHOT_FILEPATH = os.path.join(OPENCL_DIR, "snapshots", "cache.npz")
assert os.path.isfile(SNAPSHOT_FILEPATH), f"Snapshot doesn't exist: {SNAPSHOT_FILEPATH}"


# ## Observation Data
# 
# Read the real observations (number of hospital admissions in Devon) that will be used to calibrate the model. See the [README](./observation_data/README.md) for information about how these observations were obtained. They aren't the raw cases, it's actually a model that was fitted to the lagged cases.

# In[4]:


observations = pd.read_csv(os.path.join("../../", "gam_cases.csv"), header=0, names=["Day", "Cases"], )
print(f"Total cases: {sum(observations['Cases'])}")
observations


ITERATIONS = 100  # Number of iterations to run for
NUM_SEED_DAYS = 10  # Number of days to seed the population
USE_GPU = False
STORE_DETAILED_COUNTS = False
REPETITIONS = 5 

assert ITERATIONS < len(observations),     f"Have more iterations ({ITERATIONS}) than observations ({len(observations)})."

# Initialise the class so that its ready to run the model
OpenCLRunner.init(
    iterations = ITERATIONS, 
    repetitions = REPETITIONS, 
    observations = observations,
    use_gpu = USE_GPU,
    store_detailed_counts = STORE_DETAILED_COUNTS, 
    parameters_file = PARAMETERS_FILE, 
    opencl_dir = OPENCL_DIR, 
    snapshot_filepath = SNAPSHOT_FILEPATH)



from scipy.optimize import differential_evolution
bounds = [  # initial guesses for each variable:
    (0,0.1),  # current_risk_beta, 0.005
    (0,0.5),  # proportion_asymptomatic, 0.123,
    (0,1),  # infection_log_scale, 0.75
    (1,10),  #infection_mode, 7.0
    (0,5),  # presymptomatic multiplier, 1.0
    (0,5), # asymptomatic multiplier, 0.75
    (0,5) # symptomatic multiplier, 1.0 
]

optimisation_result = differential_evolution(OpenCLRunner.run_model_with_params,
                                bounds, updating='immediate', workers=1)
                                #bounds, updating='deferred', workers=2) # paralel version

with open( "./optimisation_result-evolution.pkl", "wb" ) as f:
    pickle.dump( optimisation_result, f)
    
optimisation_result.x, optimisation_result.fun


# #### XXXX TODO
# 
# machine learning based (neural) density estimation. It's called SBI (simulation-based inference, https://www.mackelab.org/sbi/) an area which is quite en vogue in the ML community.

# In[ ]:




